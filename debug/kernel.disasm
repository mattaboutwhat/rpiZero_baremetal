
../bin/kernel.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
//	stmia 	r1!,{r2, r3, r4, r5, r6, r7, r8, r9}

	//set stack stack pointer 		OLD
	//ldr 	sp, =(64*1024*1024) 	OLD
	//setup stack pointers, interrupt and application?
	mov 	r0, #(CPSR_MODE_IRQ | CPSR_IRQ_INHIBIT | CPSR_FIQ_INHIBIT )
    8000:	e3a000d2 	mov	r0, #210	; 0xd2
	msr 	cpsr_c, r0
    8004:	e121f000 	msr	CPSR_c, r0
	mov 	sp, #0x7000
    8008:	e3a0da07 	mov	sp, #28672	; 0x7000

	// Enable L1 Cache 
	mrc 	p15,0,r0,c1,c0,0
    800c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	orr 	r0,#SCTLR_ENABLE_BRANCH_PREDICTION
    8010:	e3800b02 	orr	r0, r0, #2048	; 0x800
	orr		r0,#SCTLR_ENABLE_DATA_CACHE
    8014:	e3800004 	orr	r0, r0, #4
	orr 	r0,#SCTLR_ENABLE_INSTRUCTION_CACHE
    8018:	e3800a01 	orr	r0, r0, #4096	; 0x1000
	mcr		p15,0,r0,c1,c0,0
    801c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	//enable VFP
	mrc		p15, #0, r1, c1, c0, #2 	//r1=access control reg
    8020:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr 	r1, r1, #(0xf << 20)		//enable full acces for p10,p11
    8024:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr 	p15, #0, r1, c1, c0, #2 	
    8028:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}
	mov 	r1, #0 						//flush prefetch buffer b/c FMXR below
    802c:	e3a01000 	mov	r1, #0
	mcr 	p15, #0, r1, c7, c5, #4
    8030:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
	mov 	r0, #0x40000000				//enable VFP itself
    8034:	e3a00101 	mov	r0, #1073741824	; 0x40000000
	fmxr 	fpexc, r0 					//fpexc = r0
    8038:	eee80a10 	vmsr	fpexc, r0

	//run the c startup function - will call the main function
	bl		_cstartup
    803c:	eb00000b 	bl	8070 <_cstartup>

00008040 <_inf_loop>:

_inf_loop:
	b		_inf_loop
    8040:	eafffffe 	b	8040 <_inf_loop>

00008044 <_get_stack_pointer>:

_get_stack_pointer:
	//return stack pointer value
	str 	sp, [sp]
    8044:	e58dd000 	str	sp, [sp]
	ldr 	r0, [sp]
    8048:	e59d0000 	ldr	r0, [sp]
	mov		pc, lr
    804c:	e1a0f00e 	mov	pc, lr

00008050 <_enable_interrupts>:

_enable_interrupts:
	mrs		r0, cpsr
    8050:	e10f0000 	mrs	r0, CPSR
	bic		r0, r0, #0x80
    8054:	e3c00080 	bic	r0, r0, #128	; 0x80
	msr		cpsr_c, r0
    8058:	e121f000 	msr	CPSR_c, r0
	mov 	pc, lr
    805c:	e1a0f00e 	mov	pc, lr

00008060 <_disable_interrupts>:

_disable_interrupts:
	//Doesn't work :(
	mrs		r0, cpsr
    8060:	e10f0000 	mrs	r0, CPSR
	orr		r0, r0, #0x80
    8064:	e3800080 	orr	r0, r0, #128	; 0x80
	msr		cpsr_c, r0
    8068:	e121f000 	msr	CPSR_c, r0
	mov		pc, lr
    806c:	e1a0f00e 	mov	pc, lr

00008070 <_cstartup>:
extern int __bss_end__;

extern void kernel_main(unsigned int r0, unsigned int r1, unsigned int atags);

void _cstartup(unsigned int r0, unsigned int r1, unsigned int r2)
{
    8070:	e92d4800 	push	{fp, lr}
    8074:	e28db004 	add	fp, sp, #4
    8078:	e24dd018 	sub	sp, sp, #24
    807c:	e50b0010 	str	r0, [fp, #-16]
    8080:	e50b1014 	str	r1, [fp, #-20]
    8084:	e50b2018 	str	r2, [fp, #-24]
	int* bss = &__bss_start__;
    8088:	e59f3048 	ldr	r3, [pc, #72]	; 80d8 <_cstartup+0x68>
    808c:	e50b3008 	str	r3, [fp, #-8]
	int* bss_end = &__bss_end__;
    8090:	e59f3044 	ldr	r3, [pc, #68]	; 80dc <_cstartup+0x6c>
    8094:	e50b300c 	str	r3, [fp, #-12]

	// Clear the _bss section
	while (bss < bss_end)
    8098:	ea000005 	b	80b4 <_cstartup+0x44>
		*bss++ = 0;
    809c:	e51b3008 	ldr	r3, [fp, #-8]
    80a0:	e3a02000 	mov	r2, #0
    80a4:	e5832000 	str	r2, [r3]
    80a8:	e51b3008 	ldr	r3, [fp, #-8]
    80ac:	e2833004 	add	r3, r3, #4
    80b0:	e50b3008 	str	r3, [fp, #-8]
{
	int* bss = &__bss_start__;
	int* bss_end = &__bss_end__;

	// Clear the _bss section
	while (bss < bss_end)
    80b4:	e51b2008 	ldr	r2, [fp, #-8]
    80b8:	e51b300c 	ldr	r3, [fp, #-12]
    80bc:	e1520003 	cmp	r2, r3
    80c0:	3afffff5 	bcc	809c <_cstartup+0x2c>
		*bss++ = 0;

	// Call main function (should never return)
	kernel_main(r0, r1, r2);
    80c4:	e51b0010 	ldr	r0, [fp, #-16]
    80c8:	e51b1014 	ldr	r1, [fp, #-20]
    80cc:	e51b2018 	ldr	r2, [fp, #-24]
    80d0:	eb0000fb 	bl	84c4 <kernel_main>

	//Trap here if we mistakenly do!
	while(1)
		;
    80d4:	eafffffe 	b	80d4 <_cstartup+0x64>
    80d8:	00009a4c 	.word	0x00009a4c
    80dc:	00009a8c 	.word	0x00009a8c

000080e0 <_exit>:


/* Never return from _exit as there's no OS to exit to, so instead we trap
   here */
void _exit( int status )
{
    80e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    80e4:	e28db000 	add	fp, sp, #0
    80e8:	e24dd00c 	sub	sp, sp, #12
    80ec:	e50b0008 	str	r0, [fp, #-8]
    (void)status;

    while(1)
    {
        /* TRAP HERE */
    }
    80f0:	eafffffe 	b	80f0 <_exit+0x10>

000080f4 <_close>:


/* There's currently no implementation of a file system because there's no
   file system! */
int _close( int file )
{
    80f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    80f8:	e28db000 	add	fp, sp, #0
    80fc:	e24dd00c 	sub	sp, sp, #12
    8100:	e50b0008 	str	r0, [fp, #-8]
    return -1;
    8104:	e3e03000 	mvn	r3, #0
}
    8108:	e1a00003 	mov	r0, r3
    810c:	e28bd000 	add	sp, fp, #0
    8110:	e8bd0800 	pop	{fp}
    8114:	e12fff1e 	bx	lr

00008118 <execve>:


/* Transfer control to a new process. Minimal implementation (for a system
   without processes): */
int execve( char *name, char **argv, char **env )
{
    8118:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    811c:	e28db000 	add	fp, sp, #0
    8120:	e24dd014 	sub	sp, sp, #20
    8124:	e50b0008 	str	r0, [fp, #-8]
    8128:	e50b100c 	str	r1, [fp, #-12]
    812c:	e50b2010 	str	r2, [fp, #-16]
    errno = ENOMEM;
    8130:	e59f3018 	ldr	r3, [pc, #24]	; 8150 <execve+0x38>
    8134:	e3a0200c 	mov	r2, #12
    8138:	e5832000 	str	r2, [r3]
    return -1;
    813c:	e3e03000 	mvn	r3, #0
}
    8140:	e1a00003 	mov	r0, r3
    8144:	e28bd000 	add	sp, fp, #0
    8148:	e8bd0800 	pop	{fp}
    814c:	e12fff1e 	bx	lr
    8150:	00009a88 	.word	0x00009a88

00008154 <fork>:


/* Create a new process. Minimal implementation (for a system without
   processes): */
int fork( void )
{
    8154:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8158:	e28db000 	add	fp, sp, #0
    errno = EAGAIN;
    815c:	e59f3018 	ldr	r3, [pc, #24]	; 817c <fork+0x28>
    8160:	e3a0200b 	mov	r2, #11
    8164:	e5832000 	str	r2, [r3]
    return -1;
    8168:	e3e03000 	mvn	r3, #0
}
    816c:	e1a00003 	mov	r0, r3
    8170:	e28bd000 	add	sp, fp, #0
    8174:	e8bd0800 	pop	{fp}
    8178:	e12fff1e 	bx	lr
    817c:	00009a88 	.word	0x00009a88

00008180 <_fstat>:
/* Status of an open file. For consistency with other minimal implementations
   in these examples, all files are regarded as character special devices. The
   sys/stat.h header file required is distributed in the include subdirectory
   for this C library. */
int _fstat( int file, struct stat *st )
{
    8180:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8184:	e28db000 	add	fp, sp, #0
    8188:	e24dd00c 	sub	sp, sp, #12
    818c:	e50b0008 	str	r0, [fp, #-8]
    8190:	e50b100c 	str	r1, [fp, #-12]
    st->st_mode = S_IFCHR;
    8194:	e51b300c 	ldr	r3, [fp, #-12]
    8198:	e3a02a02 	mov	r2, #8192	; 0x2000
    819c:	e5832004 	str	r2, [r3, #4]
    return 0;
    81a0:	e3a03000 	mov	r3, #0
}
    81a4:	e1a00003 	mov	r0, r3
    81a8:	e28bd000 	add	sp, fp, #0
    81ac:	e8bd0800 	pop	{fp}
    81b0:	e12fff1e 	bx	lr

000081b4 <getpid>:

/* Process-ID; this is sometimes used to generate strings unlikely to conflict
   with other processes. Minimal implementation, for a system without
   processes: */
int getpid( void )
{
    81b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    81b8:	e28db000 	add	fp, sp, #0
    return 1;
    81bc:	e3a03001 	mov	r3, #1
}
    81c0:	e1a00003 	mov	r0, r3
    81c4:	e28bd000 	add	sp, fp, #0
    81c8:	e8bd0800 	pop	{fp}
    81cc:	e12fff1e 	bx	lr

000081d0 <_isatty>:

/* Query whether output stream is a terminal. For consistency with the other
   minimal implementations, which only support output to stdout, this minimal
   implementation is suggested: */
int _isatty(int file)
{
    81d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    81d4:	e28db000 	add	fp, sp, #0
    81d8:	e24dd00c 	sub	sp, sp, #12
    81dc:	e50b0008 	str	r0, [fp, #-8]
    return 1;
    81e0:	e3a03001 	mov	r3, #1
}
    81e4:	e1a00003 	mov	r0, r3
    81e8:	e28bd000 	add	sp, fp, #0
    81ec:	e8bd0800 	pop	{fp}
    81f0:	e12fff1e 	bx	lr

000081f4 <kill>:


/* Send a signal. Minimal implementation: */
int kill( int pid, int sig )
{
    81f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    81f8:	e28db000 	add	fp, sp, #0
    81fc:	e24dd00c 	sub	sp, sp, #12
    8200:	e50b0008 	str	r0, [fp, #-8]
    8204:	e50b100c 	str	r1, [fp, #-12]
    errno = EINVAL;
    8208:	e59f3018 	ldr	r3, [pc, #24]	; 8228 <kill+0x34>
    820c:	e3a02016 	mov	r2, #22
    8210:	e5832000 	str	r2, [r3]
    return -1;
    8214:	e3e03000 	mvn	r3, #0
}
    8218:	e1a00003 	mov	r0, r3
    821c:	e28bd000 	add	sp, fp, #0
    8220:	e8bd0800 	pop	{fp}
    8224:	e12fff1e 	bx	lr
    8228:	00009a88 	.word	0x00009a88

0000822c <link>:


/* Establish a new name for an existing file. Minimal implementation: */
int link( char *old, char *new )
{
    822c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8230:	e28db000 	add	fp, sp, #0
    8234:	e24dd00c 	sub	sp, sp, #12
    8238:	e50b0008 	str	r0, [fp, #-8]
    823c:	e50b100c 	str	r1, [fp, #-12]
    errno = EMLINK;
    8240:	e59f3018 	ldr	r3, [pc, #24]	; 8260 <link+0x34>
    8244:	e3a0201f 	mov	r2, #31
    8248:	e5832000 	str	r2, [r3]
    return -1;
    824c:	e3e03000 	mvn	r3, #0
}
    8250:	e1a00003 	mov	r0, r3
    8254:	e28bd000 	add	sp, fp, #0
    8258:	e8bd0800 	pop	{fp}
    825c:	e12fff1e 	bx	lr
    8260:	00009a88 	.word	0x00009a88

00008264 <_lseek>:


/* Set position in a file. Minimal implementation: */
int _lseek(int file, int ptr, int dir)
{
    8264:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8268:	e28db000 	add	fp, sp, #0
    826c:	e24dd014 	sub	sp, sp, #20
    8270:	e50b0008 	str	r0, [fp, #-8]
    8274:	e50b100c 	str	r1, [fp, #-12]
    8278:	e50b2010 	str	r2, [fp, #-16]
    return 0;
    827c:	e3a03000 	mov	r3, #0
}
    8280:	e1a00003 	mov	r0, r3
    8284:	e28bd000 	add	sp, fp, #0
    8288:	e8bd0800 	pop	{fp}
    828c:	e12fff1e 	bx	lr

00008290 <open>:


/* Open a file. Minimal implementation: */
int open( const char *name, int flags, int mode )
{
    8290:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8294:	e28db000 	add	fp, sp, #0
    8298:	e24dd014 	sub	sp, sp, #20
    829c:	e50b0008 	str	r0, [fp, #-8]
    82a0:	e50b100c 	str	r1, [fp, #-12]
    82a4:	e50b2010 	str	r2, [fp, #-16]
    return -1;
    82a8:	e3e03000 	mvn	r3, #0
}
    82ac:	e1a00003 	mov	r0, r3
    82b0:	e28bd000 	add	sp, fp, #0
    82b4:	e8bd0800 	pop	{fp}
    82b8:	e12fff1e 	bx	lr

000082bc <_read>:


/* Read from a file. Minimal implementation: */
int _read( int file, char *ptr, int len )
{
    82bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    82c0:	e28db000 	add	fp, sp, #0
    82c4:	e24dd014 	sub	sp, sp, #20
    82c8:	e50b0008 	str	r0, [fp, #-8]
    82cc:	e50b100c 	str	r1, [fp, #-12]
    82d0:	e50b2010 	str	r2, [fp, #-16]
    return 0;
    82d4:	e3a03000 	mov	r3, #0
}
    82d8:	e1a00003 	mov	r0, r3
    82dc:	e28bd000 	add	sp, fp, #0
    82e0:	e8bd0800 	pop	{fp}
    82e4:	e12fff1e 	bx	lr

000082e8 <_sbrk>:
/* Increase program data space. As malloc and related functions depend on this,
   it is useful to have a working implementation. The following suffices for a
   standalone system; it exploits the symbol _end automatically defined by the
   GNU linker. */
caddr_t _sbrk( int incr )
{
    82e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    82ec:	e28db000 	add	fp, sp, #0
    82f0:	e24dd014 	sub	sp, sp, #20
    82f4:	e50b0010 	str	r0, [fp, #-16]
    extern char _end;
    static char* heap_end = 0;
    char* prev_heap_end;

    if( heap_end == 0 )
    82f8:	e59f304c 	ldr	r3, [pc, #76]	; 834c <_sbrk+0x64>
    82fc:	e5933000 	ldr	r3, [r3]
    8300:	e3530000 	cmp	r3, #0
    8304:	1a000002 	bne	8314 <_sbrk+0x2c>
        heap_end = &_end;
    8308:	e59f303c 	ldr	r3, [pc, #60]	; 834c <_sbrk+0x64>
    830c:	e59f203c 	ldr	r2, [pc, #60]	; 8350 <_sbrk+0x68>
    8310:	e5832000 	str	r2, [r3]

     prev_heap_end = heap_end;
    8314:	e59f3030 	ldr	r3, [pc, #48]	; 834c <_sbrk+0x64>
    8318:	e5933000 	ldr	r3, [r3]
    831c:	e50b3008 	str	r3, [fp, #-8]
     heap_end += incr;
    8320:	e59f3024 	ldr	r3, [pc, #36]	; 834c <_sbrk+0x64>
    8324:	e5932000 	ldr	r2, [r3]
    8328:	e51b3010 	ldr	r3, [fp, #-16]
    832c:	e0822003 	add	r2, r2, r3
    8330:	e59f3014 	ldr	r3, [pc, #20]	; 834c <_sbrk+0x64>
    8334:	e5832000 	str	r2, [r3]

     return (caddr_t)prev_heap_end;
    8338:	e51b3008 	ldr	r3, [fp, #-8]
}
    833c:	e1a00003 	mov	r0, r3
    8340:	e28bd000 	add	sp, fp, #0
    8344:	e8bd0800 	pop	{fp}
    8348:	e12fff1e 	bx	lr
    834c:	00009a50 	.word	0x00009a50
    8350:	00009a8c 	.word	0x00009a8c

00008354 <stat>:


/* Status of a file (by name). Minimal implementation: */
int stat( const char *file, struct stat *st )
{
    8354:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8358:	e28db000 	add	fp, sp, #0
    835c:	e24dd00c 	sub	sp, sp, #12
    8360:	e50b0008 	str	r0, [fp, #-8]
    8364:	e50b100c 	str	r1, [fp, #-12]
    st->st_mode = S_IFCHR;
    8368:	e51b300c 	ldr	r3, [fp, #-12]
    836c:	e3a02a02 	mov	r2, #8192	; 0x2000
    8370:	e5832004 	str	r2, [r3, #4]
    return 0;
    8374:	e3a03000 	mov	r3, #0
}
    8378:	e1a00003 	mov	r0, r3
    837c:	e28bd000 	add	sp, fp, #0
    8380:	e8bd0800 	pop	{fp}
    8384:	e12fff1e 	bx	lr

00008388 <times>:


/* Timing information for current process. Minimal implementation: */
clock_t times( struct tms *buf )
{
    8388:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    838c:	e28db000 	add	fp, sp, #0
    8390:	e24dd00c 	sub	sp, sp, #12
    8394:	e50b0008 	str	r0, [fp, #-8]
    return -1;
    8398:	e3e03000 	mvn	r3, #0
}
    839c:	e1a00003 	mov	r0, r3
    83a0:	e28bd000 	add	sp, fp, #0
    83a4:	e8bd0800 	pop	{fp}
    83a8:	e12fff1e 	bx	lr

000083ac <unlink>:


/* Remove a file's directory entry. Minimal implementation: */
int unlink( char *name )
{
    83ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    83b0:	e28db000 	add	fp, sp, #0
    83b4:	e24dd00c 	sub	sp, sp, #12
    83b8:	e50b0008 	str	r0, [fp, #-8]
    errno = ENOENT;
    83bc:	e59f3018 	ldr	r3, [pc, #24]	; 83dc <unlink+0x30>
    83c0:	e3a02002 	mov	r2, #2
    83c4:	e5832000 	str	r2, [r3]
    return -1;
    83c8:	e3e03000 	mvn	r3, #0
}
    83cc:	e1a00003 	mov	r0, r3
    83d0:	e28bd000 	add	sp, fp, #0
    83d4:	e8bd0800 	pop	{fp}
    83d8:	e12fff1e 	bx	lr
    83dc:	00009a88 	.word	0x00009a88

000083e0 <wait>:


/* Wait for a child process. Minimal implementation: */
int wait( int *status )
{
    83e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    83e4:	e28db000 	add	fp, sp, #0
    83e8:	e24dd00c 	sub	sp, sp, #12
    83ec:	e50b0008 	str	r0, [fp, #-8]
    errno = ECHILD;
    83f0:	e59f3018 	ldr	r3, [pc, #24]	; 8410 <wait+0x30>
    83f4:	e3a0200a 	mov	r2, #10
    83f8:	e5832000 	str	r2, [r3]
    return -1;
    83fc:	e3e03000 	mvn	r3, #0
}
    8400:	e1a00003 	mov	r0, r3
    8404:	e28bd000 	add	sp, fp, #0
    8408:	e8bd0800 	pop	{fp}
    840c:	e12fff1e 	bx	lr
    8410:	00009a88 	.word	0x00009a88

00008414 <outbyte>:


void outbyte( char b )
{
    8414:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8418:	e28db000 	add	fp, sp, #0
    841c:	e24dd00c 	sub	sp, sp, #12
    8420:	e1a03000 	mov	r3, r0
    8424:	e54b3005 	strb	r3, [fp, #-5]
    //miniUartWrite( b );
    ;
}
    8428:	e28bd000 	add	sp, fp, #0
    842c:	e8bd0800 	pop	{fp}
    8430:	e12fff1e 	bx	lr

00008434 <_write>:
   capable of doing this. The following minimal implementation is an
   incomplete example; it relies on a outbyte subroutine (not shown; typically,
   you must write this in assembler from examples provided by your hardware
   manufacturer) to actually perform the output. */
int _write( int file, char *ptr, int len )
{
    8434:	e92d4800 	push	{fp, lr}
    8438:	e28db004 	add	fp, sp, #4
    843c:	e24dd018 	sub	sp, sp, #24
    8440:	e50b0010 	str	r0, [fp, #-16]
    8444:	e50b1014 	str	r1, [fp, #-20]
    8448:	e50b2018 	str	r2, [fp, #-24]
    int todo;

    for( todo = 0; todo < len; todo++ )
    844c:	e3a03000 	mov	r3, #0
    8450:	e50b3008 	str	r3, [fp, #-8]
    8454:	ea000009 	b	8480 <_write+0x4c>
      outbyte(*ptr++);
    8458:	e51b3014 	ldr	r3, [fp, #-20]
    845c:	e5d33000 	ldrb	r3, [r3]
    8460:	e51b2014 	ldr	r2, [fp, #-20]
    8464:	e2822001 	add	r2, r2, #1
    8468:	e50b2014 	str	r2, [fp, #-20]
    846c:	e1a00003 	mov	r0, r3
    8470:	ebffffe7 	bl	8414 <outbyte>
   manufacturer) to actually perform the output. */
int _write( int file, char *ptr, int len )
{
    int todo;

    for( todo = 0; todo < len; todo++ )
    8474:	e51b3008 	ldr	r3, [fp, #-8]
    8478:	e2833001 	add	r3, r3, #1
    847c:	e50b3008 	str	r3, [fp, #-8]
    8480:	e51b2008 	ldr	r2, [fp, #-8]
    8484:	e51b3018 	ldr	r3, [fp, #-24]
    8488:	e1520003 	cmp	r2, r3
    848c:	bafffff1 	blt	8458 <_write+0x24>
      outbyte(*ptr++);

    return len;
    8490:	e51b3018 	ldr	r3, [fp, #-24]
}
    8494:	e1a00003 	mov	r0, r3
    8498:	e24bd004 	sub	sp, fp, #4
    849c:	e8bd8800 	pop	{fp, pc}

000084a0 <getGPIOController>:
#include "gpio.h"

static gpio_controller_t* gpioController = (gpio_controller_t*)GPIO_BASE;

gpio_controller_t* getGPIOController( void )
{
    84a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    84a4:	e28db000 	add	fp, sp, #0
    return gpioController;
    84a8:	e59f3010 	ldr	r3, [pc, #16]	; 84c0 <getGPIOController+0x20>
    84ac:	e5933000 	ldr	r3, [r3]
    84b0:	e1a00003 	mov	r0, r3
    84b4:	e28bd000 	add	sp, fp, #0
    84b8:	e8bd0800 	pop	{fp}
    84bc:	e12fff1e 	bx	lr
    84c0:	0000920c 	.word	0x0000920c

000084c4 <kernel_main>:
#include "base.h"
#include "gpio.h"


void kernel_main(unsigned int r0, unsigned int r1, unsigned int atags)
{
    84c4:	e92d4800 	push	{fp, lr}
    84c8:	e28db004 	add	fp, sp, #4
    84cc:	e24dd018 	sub	sp, sp, #24
    84d0:	e50b0010 	str	r0, [fp, #-16]
    84d4:	e50b1014 	str	r1, [fp, #-20]
    84d8:	e50b2018 	str	r2, [fp, #-24]
	//led GPIO output config
	getGPIOController()->LED_FSEL |= (1 << LED_FSELBIT);
    84dc:	ebffffef 	bl	84a0 <getGPIOController>
    84e0:	e1a03000 	mov	r3, r0
    84e4:	e5932010 	ldr	r2, [r3, #16]
    84e8:	e3822602 	orr	r2, r2, #2097152	; 0x200000
    84ec:	e5832010 	str	r2, [r3, #16]

	//led OFF
	getGPIOController()->LED_SET = (1 << LED_GPIOBIT);
    84f0:	ebffffea 	bl	84a0 <getGPIOController>
    84f4:	e1a03000 	mov	r3, r0
    84f8:	e3a02902 	mov	r2, #32768	; 0x8000
    84fc:	e5832020 	str	r2, [r3, #32]

	while(1) {
		for (int i=0; i<500000; i++);
    8500:	e3a03000 	mov	r3, #0
    8504:	e50b3008 	str	r3, [fp, #-8]
    8508:	ea000002 	b	8518 <kernel_main+0x54>
    850c:	e51b3008 	ldr	r3, [fp, #-8]
    8510:	e2833001 	add	r3, r3, #1
    8514:	e50b3008 	str	r3, [fp, #-8]
    8518:	e51b2008 	ldr	r2, [fp, #-8]
    851c:	e59f3050 	ldr	r3, [pc, #80]	; 8574 <kernel_main+0xb0>
    8520:	e1520003 	cmp	r2, r3
    8524:	dafffff8 	ble	850c <kernel_main+0x48>
		getGPIOController()->LED_CLR = (1 << LED_GPIOBIT);
    8528:	ebffffdc 	bl	84a0 <getGPIOController>
    852c:	e1a03000 	mov	r3, r0
    8530:	e3a02902 	mov	r2, #32768	; 0x8000
    8534:	e583202c 	str	r2, [r3, #44]	; 0x2c
		for (int i=0; i<500000; i++);
    8538:	e3a03000 	mov	r3, #0
    853c:	e50b300c 	str	r3, [fp, #-12]
    8540:	ea000002 	b	8550 <kernel_main+0x8c>
    8544:	e51b300c 	ldr	r3, [fp, #-12]
    8548:	e2833001 	add	r3, r3, #1
    854c:	e50b300c 	str	r3, [fp, #-12]
    8550:	e51b200c 	ldr	r2, [fp, #-12]
    8554:	e59f3018 	ldr	r3, [pc, #24]	; 8574 <kernel_main+0xb0>
    8558:	e1520003 	cmp	r2, r3
    855c:	dafffff8 	ble	8544 <kernel_main+0x80>
		getGPIOController()->LED_SET = (1 << LED_GPIOBIT);
    8560:	ebffffce 	bl	84a0 <getGPIOController>
    8564:	e1a03000 	mov	r3, r0
    8568:	e3a02902 	mov	r2, #32768	; 0x8000
    856c:	e5832020 	str	r2, [r3, #32]
	}
    8570:	eaffffe2 	b	8500 <kernel_main+0x3c>
    8574:	0007a11f 	.word	0x0007a11f

00008578 <cleanup_glue>:
    8578:	e92d4038 	push	{r3, r4, r5, lr}
    857c:	e1a04001 	mov	r4, r1
    8580:	e5911000 	ldr	r1, [r1]
    8584:	e3510000 	cmp	r1, #0
    8588:	e1a05000 	mov	r5, r0
    858c:	1bfffff9 	blne	8578 <cleanup_glue>
    8590:	e1a00005 	mov	r0, r5
    8594:	e1a01004 	mov	r1, r4
    8598:	eb00009c 	bl	8810 <_free_r>
    859c:	e8bd4038 	pop	{r3, r4, r5, lr}
    85a0:	e12fff1e 	bx	lr

000085a4 <_reclaim_reent>:
    85a4:	e59f30f0 	ldr	r3, [pc, #240]	; 869c <_reclaim_reent+0xf8>
    85a8:	e5933000 	ldr	r3, [r3]
    85ac:	e1500003 	cmp	r0, r3
    85b0:	e92d4070 	push	{r4, r5, r6, lr}
    85b4:	e1a05000 	mov	r5, r0
    85b8:	0a00002b 	beq	866c <_reclaim_reent+0xc8>
    85bc:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    85c0:	e3520000 	cmp	r2, #0
    85c4:	0a000011 	beq	8610 <_reclaim_reent+0x6c>
    85c8:	e3a03000 	mov	r3, #0
    85cc:	e1a06003 	mov	r6, r3
    85d0:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    85d4:	e3510000 	cmp	r1, #0
    85d8:	0a000005 	beq	85f4 <_reclaim_reent+0x50>
    85dc:	e5914000 	ldr	r4, [r1]
    85e0:	e1a00005 	mov	r0, r5
    85e4:	eb000089 	bl	8810 <_free_r>
    85e8:	e2541000 	subs	r1, r4, #0
    85ec:	1afffffa 	bne	85dc <_reclaim_reent+0x38>
    85f0:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    85f4:	e2866001 	add	r6, r6, #1
    85f8:	e3560020 	cmp	r6, #32
    85fc:	e1a03006 	mov	r3, r6
    8600:	1afffff2 	bne	85d0 <_reclaim_reent+0x2c>
    8604:	e1a00005 	mov	r0, r5
    8608:	e1a01002 	mov	r1, r2
    860c:	eb00007f 	bl	8810 <_free_r>
    8610:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    8614:	e3510000 	cmp	r1, #0
    8618:	11a00005 	movne	r0, r5
    861c:	1b00007b 	blne	8810 <_free_r>
    8620:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    8624:	e3510000 	cmp	r1, #0
    8628:	0a000008 	beq	8650 <_reclaim_reent+0xac>
    862c:	e2856f53 	add	r6, r5, #332	; 0x14c
    8630:	e1510006 	cmp	r1, r6
    8634:	0a000005 	beq	8650 <_reclaim_reent+0xac>
    8638:	e5914000 	ldr	r4, [r1]
    863c:	e1a00005 	mov	r0, r5
    8640:	eb000072 	bl	8810 <_free_r>
    8644:	e1560004 	cmp	r6, r4
    8648:	e1a01004 	mov	r1, r4
    864c:	1afffff9 	bne	8638 <_reclaim_reent+0x94>
    8650:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    8654:	e3510000 	cmp	r1, #0
    8658:	11a00005 	movne	r0, r5
    865c:	1b00006b 	blne	8810 <_free_r>
    8660:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    8664:	e3530000 	cmp	r3, #0
    8668:	1a000001 	bne	8674 <_reclaim_reent+0xd0>
    866c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8670:	e12fff1e 	bx	lr
    8674:	e1a00005 	mov	r0, r5
    8678:	e595c03c 	ldr	ip, [r5, #60]	; 0x3c
    867c:	e1a0e00f 	mov	lr, pc
    8680:	e12fff1c 	bx	ip
    8684:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    8688:	e3510000 	cmp	r1, #0
    868c:	0afffff6 	beq	866c <_reclaim_reent+0xc8>
    8690:	e1a00005 	mov	r0, r5
    8694:	e8bd4070 	pop	{r4, r5, r6, lr}
    8698:	eaffffb6 	b	8578 <cleanup_glue>
    869c:	00009638 	.word	0x00009638

000086a0 <_wrapup_reent>:
    86a0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    86a4:	e2507000 	subs	r7, r0, #0
    86a8:	059f3060 	ldreq	r3, [pc, #96]	; 8710 <_wrapup_reent+0x70>
    86ac:	05937000 	ldreq	r7, [r3]
    86b0:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    86b4:	e3560000 	cmp	r6, #0
    86b8:	0a00000d 	beq	86f4 <_wrapup_reent+0x54>
    86bc:	e5965004 	ldr	r5, [r6, #4]
    86c0:	e2554001 	subs	r4, r5, #1
    86c4:	52855002 	addpl	r5, r5, #2
    86c8:	50865105 	addpl	r5, r6, r5, lsl #2
    86cc:	4a000005 	bmi	86e8 <_wrapup_reent+0x48>
    86d0:	e5353004 	ldr	r3, [r5, #-4]!
    86d4:	e2444001 	sub	r4, r4, #1
    86d8:	e1a0e00f 	mov	lr, pc
    86dc:	e12fff13 	bx	r3
    86e0:	e3740001 	cmn	r4, #1
    86e4:	1afffff9 	bne	86d0 <_wrapup_reent+0x30>
    86e8:	e5966000 	ldr	r6, [r6]
    86ec:	e3560000 	cmp	r6, #0
    86f0:	1afffff1 	bne	86bc <_wrapup_reent+0x1c>
    86f4:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    86f8:	e3530000 	cmp	r3, #0
    86fc:	11a00007 	movne	r0, r7
    8700:	11a0e00f 	movne	lr, pc
    8704:	112fff13 	bxne	r3
    8708:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    870c:	e12fff1e 	bx	lr
    8710:	00009638 	.word	0x00009638

00008714 <_malloc_trim_r>:
    8714:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    8718:	e59f50e4 	ldr	r5, [pc, #228]	; 8804 <_malloc_trim_r+0xf0>
    871c:	e1a07001 	mov	r7, r1
    8720:	e1a04000 	mov	r4, r0
    8724:	eb0002a3 	bl	91b8 <__malloc_lock>
    8728:	e5953008 	ldr	r3, [r5, #8]
    872c:	e5936004 	ldr	r6, [r3, #4]
    8730:	e3c66003 	bic	r6, r6, #3
    8734:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    8738:	e283300f 	add	r3, r3, #15
    873c:	e0677003 	rsb	r7, r7, r3
    8740:	e1a07627 	lsr	r7, r7, #12
    8744:	e2477001 	sub	r7, r7, #1
    8748:	e1a07607 	lsl	r7, r7, #12
    874c:	e3570a01 	cmp	r7, #4096	; 0x1000
    8750:	ba000006 	blt	8770 <_malloc_trim_r+0x5c>
    8754:	e1a00004 	mov	r0, r4
    8758:	e3a01000 	mov	r1, #0
    875c:	eb000297 	bl	91c0 <_sbrk_r>
    8760:	e5953008 	ldr	r3, [r5, #8]
    8764:	e0833006 	add	r3, r3, r6
    8768:	e1500003 	cmp	r0, r3
    876c:	0a000004 	beq	8784 <_malloc_trim_r+0x70>
    8770:	e1a00004 	mov	r0, r4
    8774:	eb000290 	bl	91bc <__malloc_unlock>
    8778:	e3a00000 	mov	r0, #0
    877c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    8780:	e12fff1e 	bx	lr
    8784:	e1a00004 	mov	r0, r4
    8788:	e2671000 	rsb	r1, r7, #0
    878c:	eb00028b 	bl	91c0 <_sbrk_r>
    8790:	e3700001 	cmn	r0, #1
    8794:	0a00000b 	beq	87c8 <_malloc_trim_r+0xb4>
    8798:	e59f3068 	ldr	r3, [pc, #104]	; 8808 <_malloc_trim_r+0xf4>
    879c:	e5952008 	ldr	r2, [r5, #8]
    87a0:	e5931000 	ldr	r1, [r3]
    87a4:	e0676006 	rsb	r6, r7, r6
    87a8:	e3866001 	orr	r6, r6, #1
    87ac:	e0677001 	rsb	r7, r7, r1
    87b0:	e1a00004 	mov	r0, r4
    87b4:	e5826004 	str	r6, [r2, #4]
    87b8:	e5837000 	str	r7, [r3]
    87bc:	eb00027e 	bl	91bc <__malloc_unlock>
    87c0:	e3a00001 	mov	r0, #1
    87c4:	eaffffec 	b	877c <_malloc_trim_r+0x68>
    87c8:	e1a00004 	mov	r0, r4
    87cc:	e3a01000 	mov	r1, #0
    87d0:	eb00027a 	bl	91c0 <_sbrk_r>
    87d4:	e5953008 	ldr	r3, [r5, #8]
    87d8:	e0632000 	rsb	r2, r3, r0
    87dc:	e352000f 	cmp	r2, #15
    87e0:	daffffe2 	ble	8770 <_malloc_trim_r+0x5c>
    87e4:	e59f1020 	ldr	r1, [pc, #32]	; 880c <_malloc_trim_r+0xf8>
    87e8:	e5911000 	ldr	r1, [r1]
    87ec:	e0610000 	rsb	r0, r1, r0
    87f0:	e59f1010 	ldr	r1, [pc, #16]	; 8808 <_malloc_trim_r+0xf4>
    87f4:	e3822001 	orr	r2, r2, #1
    87f8:	e5810000 	str	r0, [r1]
    87fc:	e5832004 	str	r2, [r3, #4]
    8800:	eaffffda 	b	8770 <_malloc_trim_r+0x5c>
    8804:	0000963c 	.word	0x0000963c
    8808:	00009a60 	.word	0x00009a60
    880c:	00009a48 	.word	0x00009a48

00008810 <_free_r>:
    8810:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    8814:	e2514000 	subs	r4, r1, #0
    8818:	e1a06000 	mov	r6, r0
    881c:	0a000046 	beq	893c <_free_r+0x12c>
    8820:	eb000264 	bl	91b8 <__malloc_lock>
    8824:	e514e004 	ldr	lr, [r4, #-4]
    8828:	e59f1238 	ldr	r1, [pc, #568]	; 8a68 <_free_r+0x258>
    882c:	e244c008 	sub	ip, r4, #8
    8830:	e3ce3001 	bic	r3, lr, #1
    8834:	e08c2003 	add	r2, ip, r3
    8838:	e5910008 	ldr	r0, [r1, #8]
    883c:	e5925004 	ldr	r5, [r2, #4]
    8840:	e1500002 	cmp	r0, r2
    8844:	e3c55003 	bic	r5, r5, #3
    8848:	0a00004a 	beq	8978 <_free_r+0x168>
    884c:	e21ee001 	ands	lr, lr, #1
    8850:	e5825004 	str	r5, [r2, #4]
    8854:	13a0e000 	movne	lr, #0
    8858:	1a000009 	bne	8884 <_free_r+0x74>
    885c:	e5144008 	ldr	r4, [r4, #-8]
    8860:	e064c00c 	rsb	ip, r4, ip
    8864:	e59c0008 	ldr	r0, [ip, #8]
    8868:	e2817008 	add	r7, r1, #8
    886c:	e1500007 	cmp	r0, r7
    8870:	e0833004 	add	r3, r3, r4
    8874:	159c400c 	ldrne	r4, [ip, #12]
    8878:	1580400c 	strne	r4, [r0, #12]
    887c:	15840008 	strne	r0, [r4, #8]
    8880:	03a0e001 	moveq	lr, #1
    8884:	e0820005 	add	r0, r2, r5
    8888:	e5900004 	ldr	r0, [r0, #4]
    888c:	e3100001 	tst	r0, #1
    8890:	1a000009 	bne	88bc <_free_r+0xac>
    8894:	e35e0000 	cmp	lr, #0
    8898:	e5920008 	ldr	r0, [r2, #8]
    889c:	e0833005 	add	r3, r3, r5
    88a0:	1a000002 	bne	88b0 <_free_r+0xa0>
    88a4:	e59f41c0 	ldr	r4, [pc, #448]	; 8a6c <_free_r+0x25c>
    88a8:	e1500004 	cmp	r0, r4
    88ac:	0a000047 	beq	89d0 <_free_r+0x1c0>
    88b0:	e592200c 	ldr	r2, [r2, #12]
    88b4:	e580200c 	str	r2, [r0, #12]
    88b8:	e5820008 	str	r0, [r2, #8]
    88bc:	e3832001 	orr	r2, r3, #1
    88c0:	e35e0000 	cmp	lr, #0
    88c4:	e58c2004 	str	r2, [ip, #4]
    88c8:	e78c3003 	str	r3, [ip, r3]
    88cc:	1a000018 	bne	8934 <_free_r+0x124>
    88d0:	e3530c02 	cmp	r3, #512	; 0x200
    88d4:	3a00001a 	bcc	8944 <_free_r+0x134>
    88d8:	e1a024a3 	lsr	r2, r3, #9
    88dc:	e3520004 	cmp	r2, #4
    88e0:	8a000042 	bhi	89f0 <_free_r+0x1e0>
    88e4:	e1a0e323 	lsr	lr, r3, #6
    88e8:	e28ee038 	add	lr, lr, #56	; 0x38
    88ec:	e1a0008e 	lsl	r0, lr, #1
    88f0:	e0810100 	add	r0, r1, r0, lsl #2
    88f4:	e5902008 	ldr	r2, [r0, #8]
    88f8:	e1520000 	cmp	r2, r0
    88fc:	e59f1164 	ldr	r1, [pc, #356]	; 8a68 <_free_r+0x258>
    8900:	0a000044 	beq	8a18 <_free_r+0x208>
    8904:	e5921004 	ldr	r1, [r2, #4]
    8908:	e3c11003 	bic	r1, r1, #3
    890c:	e1530001 	cmp	r3, r1
    8910:	2a000002 	bcs	8920 <_free_r+0x110>
    8914:	e5922008 	ldr	r2, [r2, #8]
    8918:	e1500002 	cmp	r0, r2
    891c:	1afffff8 	bne	8904 <_free_r+0xf4>
    8920:	e592300c 	ldr	r3, [r2, #12]
    8924:	e58c300c 	str	r3, [ip, #12]
    8928:	e58c2008 	str	r2, [ip, #8]
    892c:	e582c00c 	str	ip, [r2, #12]
    8930:	e583c008 	str	ip, [r3, #8]
    8934:	e1a00006 	mov	r0, r6
    8938:	eb00021f 	bl	91bc <__malloc_unlock>
    893c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    8940:	e12fff1e 	bx	lr
    8944:	e5912004 	ldr	r2, [r1, #4]
    8948:	e1a031a3 	lsr	r3, r3, #3
    894c:	e1a00143 	asr	r0, r3, #2
    8950:	e3a0e001 	mov	lr, #1
    8954:	e182001e 	orr	r0, r2, lr, lsl r0
    8958:	e0813183 	add	r3, r1, r3, lsl #3
    895c:	e5932008 	ldr	r2, [r3, #8]
    8960:	e58c300c 	str	r3, [ip, #12]
    8964:	e58c2008 	str	r2, [ip, #8]
    8968:	e5810004 	str	r0, [r1, #4]
    896c:	e583c008 	str	ip, [r3, #8]
    8970:	e582c00c 	str	ip, [r2, #12]
    8974:	eaffffee 	b	8934 <_free_r+0x124>
    8978:	e31e0001 	tst	lr, #1
    897c:	e0853003 	add	r3, r5, r3
    8980:	1a000006 	bne	89a0 <_free_r+0x190>
    8984:	e5142008 	ldr	r2, [r4, #-8]
    8988:	e062c00c 	rsb	ip, r2, ip
    898c:	e59c000c 	ldr	r0, [ip, #12]
    8990:	e59ce008 	ldr	lr, [ip, #8]
    8994:	e58e000c 	str	r0, [lr, #12]
    8998:	e580e008 	str	lr, [r0, #8]
    899c:	e0833002 	add	r3, r3, r2
    89a0:	e59f20c8 	ldr	r2, [pc, #200]	; 8a70 <_free_r+0x260>
    89a4:	e5920000 	ldr	r0, [r2]
    89a8:	e3832001 	orr	r2, r3, #1
    89ac:	e1530000 	cmp	r3, r0
    89b0:	e58c2004 	str	r2, [ip, #4]
    89b4:	e581c008 	str	ip, [r1, #8]
    89b8:	3affffdd 	bcc	8934 <_free_r+0x124>
    89bc:	e59f30b0 	ldr	r3, [pc, #176]	; 8a74 <_free_r+0x264>
    89c0:	e1a00006 	mov	r0, r6
    89c4:	e5931000 	ldr	r1, [r3]
    89c8:	ebffff51 	bl	8714 <_malloc_trim_r>
    89cc:	eaffffd8 	b	8934 <_free_r+0x124>
    89d0:	e3832001 	orr	r2, r3, #1
    89d4:	e581c014 	str	ip, [r1, #20]
    89d8:	e581c010 	str	ip, [r1, #16]
    89dc:	e58c000c 	str	r0, [ip, #12]
    89e0:	e58c0008 	str	r0, [ip, #8]
    89e4:	e58c2004 	str	r2, [ip, #4]
    89e8:	e78c3003 	str	r3, [ip, r3]
    89ec:	eaffffd0 	b	8934 <_free_r+0x124>
    89f0:	e3520014 	cmp	r2, #20
    89f4:	9282e05b 	addls	lr, r2, #91	; 0x5b
    89f8:	91a0008e 	lslls	r0, lr, #1
    89fc:	9affffbb 	bls	88f0 <_free_r+0xe0>
    8a00:	e3520054 	cmp	r2, #84	; 0x54
    8a04:	8a00000a 	bhi	8a34 <_free_r+0x224>
    8a08:	e1a0e623 	lsr	lr, r3, #12
    8a0c:	e28ee06e 	add	lr, lr, #110	; 0x6e
    8a10:	e1a0008e 	lsl	r0, lr, #1
    8a14:	eaffffb5 	b	88f0 <_free_r+0xe0>
    8a18:	e5913004 	ldr	r3, [r1, #4]
    8a1c:	e1a0e14e 	asr	lr, lr, #2
    8a20:	e3a00001 	mov	r0, #1
    8a24:	e1830e10 	orr	r0, r3, r0, lsl lr
    8a28:	e1a03002 	mov	r3, r2
    8a2c:	e5810004 	str	r0, [r1, #4]
    8a30:	eaffffbb 	b	8924 <_free_r+0x114>
    8a34:	e3520f55 	cmp	r2, #340	; 0x154
    8a38:	91a0e7a3 	lsrls	lr, r3, #15
    8a3c:	928ee077 	addls	lr, lr, #119	; 0x77
    8a40:	91a0008e 	lslls	r0, lr, #1
    8a44:	9affffa9 	bls	88f0 <_free_r+0xe0>
    8a48:	e59f0028 	ldr	r0, [pc, #40]	; 8a78 <_free_r+0x268>
    8a4c:	e1520000 	cmp	r2, r0
    8a50:	91a0e923 	lsrls	lr, r3, #18
    8a54:	928ee07c 	addls	lr, lr, #124	; 0x7c
    8a58:	91a0008e 	lslls	r0, lr, #1
    8a5c:	83a000fc 	movhi	r0, #252	; 0xfc
    8a60:	83a0e07e 	movhi	lr, #126	; 0x7e
    8a64:	eaffffa1 	b	88f0 <_free_r+0xe0>
    8a68:	0000963c 	.word	0x0000963c
    8a6c:	00009644 	.word	0x00009644
    8a70:	00009a44 	.word	0x00009a44
    8a74:	00009a5c 	.word	0x00009a5c
    8a78:	00000554 	.word	0x00000554

00008a7c <_malloc_r>:
    8a7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a80:	e281500b 	add	r5, r1, #11
    8a84:	e3550016 	cmp	r5, #22
    8a88:	83c55007 	bichi	r5, r5, #7
    8a8c:	81a03fa5 	lsrhi	r3, r5, #31
    8a90:	93a03000 	movls	r3, #0
    8a94:	93a05010 	movls	r5, #16
    8a98:	e1550001 	cmp	r5, r1
    8a9c:	21a01003 	movcs	r1, r3
    8aa0:	33831001 	orrcc	r1, r3, #1
    8aa4:	e3510000 	cmp	r1, #0
    8aa8:	13a0300c 	movne	r3, #12
    8aac:	e24dd00c 	sub	sp, sp, #12
    8ab0:	e1a06000 	mov	r6, r0
    8ab4:	15803000 	strne	r3, [r0]
    8ab8:	13a04000 	movne	r4, #0
    8abc:	1a000015 	bne	8b18 <_malloc_r+0x9c>
    8ac0:	eb0001bc 	bl	91b8 <__malloc_lock>
    8ac4:	e3550f7e 	cmp	r5, #504	; 0x1f8
    8ac8:	2a000016 	bcs	8b28 <_malloc_r+0xac>
    8acc:	e59f76c8 	ldr	r7, [pc, #1736]	; 919c <_malloc_r+0x720>
    8ad0:	e1a0e1a5 	lsr	lr, r5, #3
    8ad4:	e087318e 	add	r3, r7, lr, lsl #3
    8ad8:	e593400c 	ldr	r4, [r3, #12]
    8adc:	e1540003 	cmp	r4, r3
    8ae0:	0a00014f 	beq	9024 <_malloc_r+0x5a8>
    8ae4:	e5943004 	ldr	r3, [r4, #4]
    8ae8:	e3c33003 	bic	r3, r3, #3
    8aec:	e0843003 	add	r3, r4, r3
    8af0:	e5930004 	ldr	r0, [r3, #4]
    8af4:	e2841008 	add	r1, r4, #8
    8af8:	e8910006 	ldm	r1, {r1, r2}
    8afc:	e3800001 	orr	r0, r0, #1
    8b00:	e5830004 	str	r0, [r3, #4]
    8b04:	e581200c 	str	r2, [r1, #12]
    8b08:	e5821008 	str	r1, [r2, #8]
    8b0c:	e1a00006 	mov	r0, r6
    8b10:	eb0001a9 	bl	91bc <__malloc_unlock>
    8b14:	e2844008 	add	r4, r4, #8
    8b18:	e1a00004 	mov	r0, r4
    8b1c:	e28dd00c 	add	sp, sp, #12
    8b20:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b24:	e12fff1e 	bx	lr
    8b28:	e1b0e4a5 	lsrs	lr, r5, #9
    8b2c:	01a0e1a5 	lsreq	lr, r5, #3
    8b30:	01a0108e 	lsleq	r1, lr, #1
    8b34:	1a000061 	bne	8cc0 <_malloc_r+0x244>
    8b38:	e59f765c 	ldr	r7, [pc, #1628]	; 919c <_malloc_r+0x720>
    8b3c:	e0871101 	add	r1, r7, r1, lsl #2
    8b40:	e591400c 	ldr	r4, [r1, #12]
    8b44:	e1510004 	cmp	r1, r4
    8b48:	1a000005 	bne	8b64 <_malloc_r+0xe8>
    8b4c:	ea00000a 	b	8b7c <_malloc_r+0x100>
    8b50:	e3530000 	cmp	r3, #0
    8b54:	aa0000db 	bge	8ec8 <_malloc_r+0x44c>
    8b58:	e594400c 	ldr	r4, [r4, #12]
    8b5c:	e1510004 	cmp	r1, r4
    8b60:	0a000005 	beq	8b7c <_malloc_r+0x100>
    8b64:	e5942004 	ldr	r2, [r4, #4]
    8b68:	e3c22003 	bic	r2, r2, #3
    8b6c:	e0653002 	rsb	r3, r5, r2
    8b70:	e353000f 	cmp	r3, #15
    8b74:	dafffff5 	ble	8b50 <_malloc_r+0xd4>
    8b78:	e24ee001 	sub	lr, lr, #1
    8b7c:	e28ee001 	add	lr, lr, #1
    8b80:	e59f3614 	ldr	r3, [pc, #1556]	; 919c <_malloc_r+0x720>
    8b84:	e5974010 	ldr	r4, [r7, #16]
    8b88:	e2838008 	add	r8, r3, #8
    8b8c:	e1540008 	cmp	r4, r8
    8b90:	05931004 	ldreq	r1, [r3, #4]
    8b94:	0a000016 	beq	8bf4 <_malloc_r+0x178>
    8b98:	e5942004 	ldr	r2, [r4, #4]
    8b9c:	e3c22003 	bic	r2, r2, #3
    8ba0:	e0651002 	rsb	r1, r5, r2
    8ba4:	e351000f 	cmp	r1, #15
    8ba8:	ca0000fb 	bgt	8f9c <_malloc_r+0x520>
    8bac:	e3510000 	cmp	r1, #0
    8bb0:	e5838014 	str	r8, [r3, #20]
    8bb4:	e5838010 	str	r8, [r3, #16]
    8bb8:	aa000046 	bge	8cd8 <_malloc_r+0x25c>
    8bbc:	e3520c02 	cmp	r2, #512	; 0x200
    8bc0:	2a0000d6 	bcs	8f20 <_malloc_r+0x4a4>
    8bc4:	e5930004 	ldr	r0, [r3, #4]
    8bc8:	e1a021a2 	lsr	r2, r2, #3
    8bcc:	e1a01142 	asr	r1, r2, #2
    8bd0:	e3a0c001 	mov	ip, #1
    8bd4:	e180111c 	orr	r1, r0, ip, lsl r1
    8bd8:	e0832182 	add	r2, r3, r2, lsl #3
    8bdc:	e5920008 	ldr	r0, [r2, #8]
    8be0:	e584200c 	str	r2, [r4, #12]
    8be4:	e5840008 	str	r0, [r4, #8]
    8be8:	e5831004 	str	r1, [r3, #4]
    8bec:	e5824008 	str	r4, [r2, #8]
    8bf0:	e580400c 	str	r4, [r0, #12]
    8bf4:	e1a0314e 	asr	r3, lr, #2
    8bf8:	e3a00001 	mov	r0, #1
    8bfc:	e1a00310 	lsl	r0, r0, r3
    8c00:	e1500001 	cmp	r0, r1
    8c04:	8a00003b 	bhi	8cf8 <_malloc_r+0x27c>
    8c08:	e1110000 	tst	r1, r0
    8c0c:	1a000008 	bne	8c34 <_malloc_r+0x1b8>
    8c10:	e1a00080 	lsl	r0, r0, #1
    8c14:	e3cee003 	bic	lr, lr, #3
    8c18:	e1110000 	tst	r1, r0
    8c1c:	e28ee004 	add	lr, lr, #4
    8c20:	1a000003 	bne	8c34 <_malloc_r+0x1b8>
    8c24:	e1a00080 	lsl	r0, r0, #1
    8c28:	e1110000 	tst	r1, r0
    8c2c:	e28ee004 	add	lr, lr, #4
    8c30:	0afffffb 	beq	8c24 <_malloc_r+0x1a8>
    8c34:	e087a18e 	add	sl, r7, lr, lsl #3
    8c38:	e1a0c00a 	mov	ip, sl
    8c3c:	e1a0400e 	mov	r4, lr
    8c40:	e59c300c 	ldr	r3, [ip, #12]
    8c44:	e15c0003 	cmp	ip, r3
    8c48:	1a000005 	bne	8c64 <_malloc_r+0x1e8>
    8c4c:	ea0000df 	b	8fd0 <_malloc_r+0x554>
    8c50:	e3520000 	cmp	r2, #0
    8c54:	aa0000f8 	bge	903c <_malloc_r+0x5c0>
    8c58:	e593300c 	ldr	r3, [r3, #12]
    8c5c:	e15c0003 	cmp	ip, r3
    8c60:	0a0000da 	beq	8fd0 <_malloc_r+0x554>
    8c64:	e5931004 	ldr	r1, [r3, #4]
    8c68:	e3c11003 	bic	r1, r1, #3
    8c6c:	e0652001 	rsb	r2, r5, r1
    8c70:	e352000f 	cmp	r2, #15
    8c74:	dafffff5 	ble	8c50 <_malloc_r+0x1d4>
    8c78:	e1a04003 	mov	r4, r3
    8c7c:	e593000c 	ldr	r0, [r3, #12]
    8c80:	e5b4c008 	ldr	ip, [r4, #8]!
    8c84:	e0831005 	add	r1, r3, r5
    8c88:	e382e001 	orr	lr, r2, #1
    8c8c:	e3855001 	orr	r5, r5, #1
    8c90:	e58c000c 	str	r0, [ip, #12]
    8c94:	e580c008 	str	ip, [r0, #8]
    8c98:	e5835004 	str	r5, [r3, #4]
    8c9c:	e5871014 	str	r1, [r7, #20]
    8ca0:	e5871010 	str	r1, [r7, #16]
    8ca4:	e581800c 	str	r8, [r1, #12]
    8ca8:	e5818008 	str	r8, [r1, #8]
    8cac:	e581e004 	str	lr, [r1, #4]
    8cb0:	e7812002 	str	r2, [r1, r2]
    8cb4:	e1a00006 	mov	r0, r6
    8cb8:	eb00013f 	bl	91bc <__malloc_unlock>
    8cbc:	eaffff95 	b	8b18 <_malloc_r+0x9c>
    8cc0:	e35e0004 	cmp	lr, #4
    8cc4:	8a00008b 	bhi	8ef8 <_malloc_r+0x47c>
    8cc8:	e1a0e325 	lsr	lr, r5, #6
    8ccc:	e28ee038 	add	lr, lr, #56	; 0x38
    8cd0:	e1a0108e 	lsl	r1, lr, #1
    8cd4:	eaffff97 	b	8b38 <_malloc_r+0xbc>
    8cd8:	e0842002 	add	r2, r4, r2
    8cdc:	e5923004 	ldr	r3, [r2, #4]
    8ce0:	e3833001 	orr	r3, r3, #1
    8ce4:	e5823004 	str	r3, [r2, #4]
    8ce8:	e1a00006 	mov	r0, r6
    8cec:	eb000132 	bl	91bc <__malloc_unlock>
    8cf0:	e2844008 	add	r4, r4, #8
    8cf4:	eaffff87 	b	8b18 <_malloc_r+0x9c>
    8cf8:	e5974008 	ldr	r4, [r7, #8]
    8cfc:	e594a004 	ldr	sl, [r4, #4]
    8d00:	e3caa003 	bic	sl, sl, #3
    8d04:	e155000a 	cmp	r5, sl
    8d08:	8a000002 	bhi	8d18 <_malloc_r+0x29c>
    8d0c:	e065300a 	rsb	r3, r5, sl
    8d10:	e353000f 	cmp	r3, #15
    8d14:	ca000061 	bgt	8ea0 <_malloc_r+0x424>
    8d18:	e59fc480 	ldr	ip, [pc, #1152]	; 91a0 <_malloc_r+0x724>
    8d1c:	e59f2480 	ldr	r2, [pc, #1152]	; 91a4 <_malloc_r+0x728>
    8d20:	e59c3000 	ldr	r3, [ip]
    8d24:	e592b000 	ldr	fp, [r2]
    8d28:	e3730001 	cmn	r3, #1
    8d2c:	e085b00b 	add	fp, r5, fp
    8d30:	128bba01 	addne	fp, fp, #4096	; 0x1000
    8d34:	128bb00f 	addne	fp, fp, #15
    8d38:	13cbbeff 	bicne	fp, fp, #4080	; 0xff0
    8d3c:	028bb010 	addeq	fp, fp, #16
    8d40:	13cbb00f 	bicne	fp, fp, #15
    8d44:	e084200a 	add	r2, r4, sl
    8d48:	e1a00006 	mov	r0, r6
    8d4c:	e1a0100b 	mov	r1, fp
    8d50:	e58d2004 	str	r2, [sp, #4]
    8d54:	e58dc000 	str	ip, [sp]
    8d58:	eb000118 	bl	91c0 <_sbrk_r>
    8d5c:	e3700001 	cmn	r0, #1
    8d60:	e1a08000 	mov	r8, r0
    8d64:	e59d2004 	ldr	r2, [sp, #4]
    8d68:	e59dc000 	ldr	ip, [sp]
    8d6c:	0a0000e3 	beq	9100 <_malloc_r+0x684>
    8d70:	e1520000 	cmp	r2, r0
    8d74:	8a0000c0 	bhi	907c <_malloc_r+0x600>
    8d78:	e59f9428 	ldr	r9, [pc, #1064]	; 91a8 <_malloc_r+0x72c>
    8d7c:	e5993000 	ldr	r3, [r9]
    8d80:	e1520008 	cmp	r2, r8
    8d84:	e08b3003 	add	r3, fp, r3
    8d88:	e5893000 	str	r3, [r9]
    8d8c:	0a0000df 	beq	9110 <_malloc_r+0x694>
    8d90:	e59c1000 	ldr	r1, [ip]
    8d94:	e3710001 	cmn	r1, #1
    8d98:	10622008 	rsbne	r2, r2, r8
    8d9c:	059f33fc 	ldreq	r3, [pc, #1020]	; 91a0 <_malloc_r+0x724>
    8da0:	10833002 	addne	r3, r3, r2
    8da4:	05838000 	streq	r8, [r3]
    8da8:	15893000 	strne	r3, [r9]
    8dac:	e2183007 	ands	r3, r8, #7
    8db0:	12632008 	rsbne	r2, r3, #8
    8db4:	10888002 	addne	r8, r8, r2
    8db8:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    8dbc:	12832008 	addne	r2, r3, #8
    8dc0:	e088300b 	add	r3, r8, fp
    8dc4:	03a02a01 	moveq	r2, #4096	; 0x1000
    8dc8:	e1a03a03 	lsl	r3, r3, #20
    8dcc:	e042ba23 	sub	fp, r2, r3, lsr #20
    8dd0:	e1a0100b 	mov	r1, fp
    8dd4:	e1a00006 	mov	r0, r6
    8dd8:	eb0000f8 	bl	91c0 <_sbrk_r>
    8ddc:	e3700001 	cmn	r0, #1
    8de0:	10682000 	rsbne	r2, r8, r0
    8de4:	e5993000 	ldr	r3, [r9]
    8de8:	108b2002 	addne	r2, fp, r2
    8dec:	03a0b000 	moveq	fp, #0
    8df0:	13822001 	orrne	r2, r2, #1
    8df4:	03a02001 	moveq	r2, #1
    8df8:	e08b3003 	add	r3, fp, r3
    8dfc:	e1540007 	cmp	r4, r7
    8e00:	e5893000 	str	r3, [r9]
    8e04:	e5878008 	str	r8, [r7, #8]
    8e08:	e5882004 	str	r2, [r8, #4]
    8e0c:	0a00000d 	beq	8e48 <_malloc_r+0x3cc>
    8e10:	e35a000f 	cmp	sl, #15
    8e14:	9a0000ac 	bls	90cc <_malloc_r+0x650>
    8e18:	e594c004 	ldr	ip, [r4, #4]
    8e1c:	e24a200c 	sub	r2, sl, #12
    8e20:	e3c22007 	bic	r2, r2, #7
    8e24:	e20cc001 	and	ip, ip, #1
    8e28:	e0841002 	add	r1, r4, r2
    8e2c:	e3a00005 	mov	r0, #5
    8e30:	e182c00c 	orr	ip, r2, ip
    8e34:	e352000f 	cmp	r2, #15
    8e38:	e584c004 	str	ip, [r4, #4]
    8e3c:	e5810004 	str	r0, [r1, #4]
    8e40:	e5810008 	str	r0, [r1, #8]
    8e44:	8a0000b8 	bhi	912c <_malloc_r+0x6b0>
    8e48:	e59f235c 	ldr	r2, [pc, #860]	; 91ac <_malloc_r+0x730>
    8e4c:	e5921000 	ldr	r1, [r2]
    8e50:	e1530001 	cmp	r3, r1
    8e54:	85823000 	strhi	r3, [r2]
    8e58:	e59f2350 	ldr	r2, [pc, #848]	; 91b0 <_malloc_r+0x734>
    8e5c:	e5921000 	ldr	r1, [r2]
    8e60:	e5974008 	ldr	r4, [r7, #8]
    8e64:	e1530001 	cmp	r3, r1
    8e68:	95943004 	ldrls	r3, [r4, #4]
    8e6c:	85941004 	ldrhi	r1, [r4, #4]
    8e70:	85823000 	strhi	r3, [r2]
    8e74:	93c33003 	bicls	r3, r3, #3
    8e78:	83c13003 	bichi	r3, r1, #3
    8e7c:	e1550003 	cmp	r5, r3
    8e80:	e0653003 	rsb	r3, r5, r3
    8e84:	8a000001 	bhi	8e90 <_malloc_r+0x414>
    8e88:	e353000f 	cmp	r3, #15
    8e8c:	ca000003 	bgt	8ea0 <_malloc_r+0x424>
    8e90:	e1a00006 	mov	r0, r6
    8e94:	eb0000c8 	bl	91bc <__malloc_unlock>
    8e98:	e3a04000 	mov	r4, #0
    8e9c:	eaffff1d 	b	8b18 <_malloc_r+0x9c>
    8ea0:	e0842005 	add	r2, r4, r5
    8ea4:	e3833001 	orr	r3, r3, #1
    8ea8:	e3855001 	orr	r5, r5, #1
    8eac:	e5845004 	str	r5, [r4, #4]
    8eb0:	e1a00006 	mov	r0, r6
    8eb4:	e5823004 	str	r3, [r2, #4]
    8eb8:	e5872008 	str	r2, [r7, #8]
    8ebc:	e2844008 	add	r4, r4, #8
    8ec0:	eb0000bd 	bl	91bc <__malloc_unlock>
    8ec4:	eaffff13 	b	8b18 <_malloc_r+0x9c>
    8ec8:	e0842002 	add	r2, r4, r2
    8ecc:	e5920004 	ldr	r0, [r2, #4]
    8ed0:	e2841008 	add	r1, r4, #8
    8ed4:	e891000a 	ldm	r1, {r1, r3}
    8ed8:	e3800001 	orr	r0, r0, #1
    8edc:	e5820004 	str	r0, [r2, #4]
    8ee0:	e581300c 	str	r3, [r1, #12]
    8ee4:	e5831008 	str	r1, [r3, #8]
    8ee8:	e1a00006 	mov	r0, r6
    8eec:	eb0000b2 	bl	91bc <__malloc_unlock>
    8ef0:	e2844008 	add	r4, r4, #8
    8ef4:	eaffff07 	b	8b18 <_malloc_r+0x9c>
    8ef8:	e35e0014 	cmp	lr, #20
    8efc:	928ee05b 	addls	lr, lr, #91	; 0x5b
    8f00:	91a0108e 	lslls	r1, lr, #1
    8f04:	9affff0b 	bls	8b38 <_malloc_r+0xbc>
    8f08:	e35e0054 	cmp	lr, #84	; 0x54
    8f0c:	8a000061 	bhi	9098 <_malloc_r+0x61c>
    8f10:	e1a0e625 	lsr	lr, r5, #12
    8f14:	e28ee06e 	add	lr, lr, #110	; 0x6e
    8f18:	e1a0108e 	lsl	r1, lr, #1
    8f1c:	eaffff05 	b	8b38 <_malloc_r+0xbc>
    8f20:	e1a034a2 	lsr	r3, r2, #9
    8f24:	e3530004 	cmp	r3, #4
    8f28:	9a00004f 	bls	906c <_malloc_r+0x5f0>
    8f2c:	e3530014 	cmp	r3, #20
    8f30:	9283a05b 	addls	sl, r3, #91	; 0x5b
    8f34:	91a0008a 	lslls	r0, sl, #1
    8f38:	9a000004 	bls	8f50 <_malloc_r+0x4d4>
    8f3c:	e3530054 	cmp	r3, #84	; 0x54
    8f40:	8a00007f 	bhi	9144 <_malloc_r+0x6c8>
    8f44:	e1a0a622 	lsr	sl, r2, #12
    8f48:	e28aa06e 	add	sl, sl, #110	; 0x6e
    8f4c:	e1a0008a 	lsl	r0, sl, #1
    8f50:	e0870100 	add	r0, r7, r0, lsl #2
    8f54:	e5903008 	ldr	r3, [r0, #8]
    8f58:	e1530000 	cmp	r3, r0
    8f5c:	e59fc238 	ldr	ip, [pc, #568]	; 919c <_malloc_r+0x720>
    8f60:	0a000052 	beq	90b0 <_malloc_r+0x634>
    8f64:	e5931004 	ldr	r1, [r3, #4]
    8f68:	e3c11003 	bic	r1, r1, #3
    8f6c:	e1520001 	cmp	r2, r1
    8f70:	2a000002 	bcs	8f80 <_malloc_r+0x504>
    8f74:	e5933008 	ldr	r3, [r3, #8]
    8f78:	e1500003 	cmp	r0, r3
    8f7c:	1afffff8 	bne	8f64 <_malloc_r+0x4e8>
    8f80:	e593200c 	ldr	r2, [r3, #12]
    8f84:	e5971004 	ldr	r1, [r7, #4]
    8f88:	e584200c 	str	r2, [r4, #12]
    8f8c:	e5843008 	str	r3, [r4, #8]
    8f90:	e583400c 	str	r4, [r3, #12]
    8f94:	e5824008 	str	r4, [r2, #8]
    8f98:	eaffff15 	b	8bf4 <_malloc_r+0x178>
    8f9c:	e0842005 	add	r2, r4, r5
    8fa0:	e3810001 	orr	r0, r1, #1
    8fa4:	e3855001 	orr	r5, r5, #1
    8fa8:	e5845004 	str	r5, [r4, #4]
    8fac:	e5832014 	str	r2, [r3, #20]
    8fb0:	e5832010 	str	r2, [r3, #16]
    8fb4:	e582800c 	str	r8, [r2, #12]
    8fb8:	e9820101 	stmib	r2, {r0, r8}
    8fbc:	e7821001 	str	r1, [r2, r1]
    8fc0:	e1a00006 	mov	r0, r6
    8fc4:	eb00007c 	bl	91bc <__malloc_unlock>
    8fc8:	e2844008 	add	r4, r4, #8
    8fcc:	eafffed1 	b	8b18 <_malloc_r+0x9c>
    8fd0:	e2844001 	add	r4, r4, #1
    8fd4:	e3140003 	tst	r4, #3
    8fd8:	e28cc008 	add	ip, ip, #8
    8fdc:	1affff17 	bne	8c40 <_malloc_r+0x1c4>
    8fe0:	e31e0003 	tst	lr, #3
    8fe4:	e24a3008 	sub	r3, sl, #8
    8fe8:	0a000062 	beq	9178 <_malloc_r+0x6fc>
    8fec:	e59aa000 	ldr	sl, [sl]
    8ff0:	e15a0003 	cmp	sl, r3
    8ff4:	e24ee001 	sub	lr, lr, #1
    8ff8:	0afffff8 	beq	8fe0 <_malloc_r+0x564>
    8ffc:	e5973004 	ldr	r3, [r7, #4]
    9000:	e1a00080 	lsl	r0, r0, #1
    9004:	e1500003 	cmp	r0, r3
    9008:	8affff3a 	bhi	8cf8 <_malloc_r+0x27c>
    900c:	e3500000 	cmp	r0, #0
    9010:	0affff38 	beq	8cf8 <_malloc_r+0x27c>
    9014:	e1130000 	tst	r3, r0
    9018:	0a00005a 	beq	9188 <_malloc_r+0x70c>
    901c:	e1a0e004 	mov	lr, r4
    9020:	eaffff03 	b	8c34 <_malloc_r+0x1b8>
    9024:	e2843008 	add	r3, r4, #8
    9028:	e5944014 	ldr	r4, [r4, #20]
    902c:	e1530004 	cmp	r3, r4
    9030:	028ee002 	addeq	lr, lr, #2
    9034:	0afffed1 	beq	8b80 <_malloc_r+0x104>
    9038:	eafffea9 	b	8ae4 <_malloc_r+0x68>
    903c:	e0831001 	add	r1, r3, r1
    9040:	e5910004 	ldr	r0, [r1, #4]
    9044:	e1a04003 	mov	r4, r3
    9048:	e5b42008 	ldr	r2, [r4, #8]!
    904c:	e593300c 	ldr	r3, [r3, #12]
    9050:	e3800001 	orr	r0, r0, #1
    9054:	e5810004 	str	r0, [r1, #4]
    9058:	e582300c 	str	r3, [r2, #12]
    905c:	e5832008 	str	r2, [r3, #8]
    9060:	e1a00006 	mov	r0, r6
    9064:	eb000054 	bl	91bc <__malloc_unlock>
    9068:	eafffeaa 	b	8b18 <_malloc_r+0x9c>
    906c:	e1a0a322 	lsr	sl, r2, #6
    9070:	e28aa038 	add	sl, sl, #56	; 0x38
    9074:	e1a0008a 	lsl	r0, sl, #1
    9078:	eaffffb4 	b	8f50 <_malloc_r+0x4d4>
    907c:	e1540007 	cmp	r4, r7
    9080:	0affff3c 	beq	8d78 <_malloc_r+0x2fc>
    9084:	e59f3110 	ldr	r3, [pc, #272]	; 919c <_malloc_r+0x720>
    9088:	e5934008 	ldr	r4, [r3, #8]
    908c:	e5943004 	ldr	r3, [r4, #4]
    9090:	e3c33003 	bic	r3, r3, #3
    9094:	eaffff78 	b	8e7c <_malloc_r+0x400>
    9098:	e35e0f55 	cmp	lr, #340	; 0x154
    909c:	8a00000f 	bhi	90e0 <_malloc_r+0x664>
    90a0:	e1a0e7a5 	lsr	lr, r5, #15
    90a4:	e28ee077 	add	lr, lr, #119	; 0x77
    90a8:	e1a0108e 	lsl	r1, lr, #1
    90ac:	eafffea1 	b	8b38 <_malloc_r+0xbc>
    90b0:	e59c2004 	ldr	r2, [ip, #4]
    90b4:	e1a0a14a 	asr	sl, sl, #2
    90b8:	e3a01001 	mov	r1, #1
    90bc:	e1821a11 	orr	r1, r2, r1, lsl sl
    90c0:	e1a02003 	mov	r2, r3
    90c4:	e58c1004 	str	r1, [ip, #4]
    90c8:	eaffffae 	b	8f88 <_malloc_r+0x50c>
    90cc:	e3a03001 	mov	r3, #1
    90d0:	e5883004 	str	r3, [r8, #4]
    90d4:	e1a04008 	mov	r4, r8
    90d8:	e3a03000 	mov	r3, #0
    90dc:	eaffff66 	b	8e7c <_malloc_r+0x400>
    90e0:	e59f30cc 	ldr	r3, [pc, #204]	; 91b4 <_malloc_r+0x738>
    90e4:	e15e0003 	cmp	lr, r3
    90e8:	91a0e925 	lsrls	lr, r5, #18
    90ec:	928ee07c 	addls	lr, lr, #124	; 0x7c
    90f0:	91a0108e 	lslls	r1, lr, #1
    90f4:	83a010fc 	movhi	r1, #252	; 0xfc
    90f8:	83a0e07e 	movhi	lr, #126	; 0x7e
    90fc:	eafffe8d 	b	8b38 <_malloc_r+0xbc>
    9100:	e5974008 	ldr	r4, [r7, #8]
    9104:	e5943004 	ldr	r3, [r4, #4]
    9108:	e3c33003 	bic	r3, r3, #3
    910c:	eaffff5a 	b	8e7c <_malloc_r+0x400>
    9110:	e1b01a02 	lsls	r1, r2, #20
    9114:	1affff1d 	bne	8d90 <_malloc_r+0x314>
    9118:	e5972008 	ldr	r2, [r7, #8]
    911c:	e08b100a 	add	r1, fp, sl
    9120:	e3811001 	orr	r1, r1, #1
    9124:	e5821004 	str	r1, [r2, #4]
    9128:	eaffff46 	b	8e48 <_malloc_r+0x3cc>
    912c:	e1a00006 	mov	r0, r6
    9130:	e2841008 	add	r1, r4, #8
    9134:	ebfffdb5 	bl	8810 <_free_r>
    9138:	e59f3068 	ldr	r3, [pc, #104]	; 91a8 <_malloc_r+0x72c>
    913c:	e5933000 	ldr	r3, [r3]
    9140:	eaffff40 	b	8e48 <_malloc_r+0x3cc>
    9144:	e3530f55 	cmp	r3, #340	; 0x154
    9148:	91a0a7a2 	lsrls	sl, r2, #15
    914c:	928aa077 	addls	sl, sl, #119	; 0x77
    9150:	91a0008a 	lslls	r0, sl, #1
    9154:	9affff7d 	bls	8f50 <_malloc_r+0x4d4>
    9158:	e59f1054 	ldr	r1, [pc, #84]	; 91b4 <_malloc_r+0x738>
    915c:	e1530001 	cmp	r3, r1
    9160:	91a0a922 	lsrls	sl, r2, #18
    9164:	928aa07c 	addls	sl, sl, #124	; 0x7c
    9168:	91a0008a 	lslls	r0, sl, #1
    916c:	83a000fc 	movhi	r0, #252	; 0xfc
    9170:	83a0a07e 	movhi	sl, #126	; 0x7e
    9174:	eaffff75 	b	8f50 <_malloc_r+0x4d4>
    9178:	e5973004 	ldr	r3, [r7, #4]
    917c:	e1c33000 	bic	r3, r3, r0
    9180:	e5873004 	str	r3, [r7, #4]
    9184:	eaffff9d 	b	9000 <_malloc_r+0x584>
    9188:	e1a00080 	lsl	r0, r0, #1
    918c:	e1130000 	tst	r3, r0
    9190:	e2844004 	add	r4, r4, #4
    9194:	1affffa0 	bne	901c <_malloc_r+0x5a0>
    9198:	eafffffa 	b	9188 <_malloc_r+0x70c>
    919c:	0000963c 	.word	0x0000963c
    91a0:	00009a48 	.word	0x00009a48
    91a4:	00009a5c 	.word	0x00009a5c
    91a8:	00009a60 	.word	0x00009a60
    91ac:	00009a58 	.word	0x00009a58
    91b0:	00009a54 	.word	0x00009a54
    91b4:	00000554 	.word	0x00000554

000091b8 <__malloc_lock>:
    91b8:	e12fff1e 	bx	lr

000091bc <__malloc_unlock>:
    91bc:	e12fff1e 	bx	lr

000091c0 <_sbrk_r>:
    91c0:	e92d4038 	push	{r3, r4, r5, lr}
    91c4:	e59f4030 	ldr	r4, [pc, #48]	; 91fc <_sbrk_r+0x3c>
    91c8:	e3a03000 	mov	r3, #0
    91cc:	e1a05000 	mov	r5, r0
    91d0:	e1a00001 	mov	r0, r1
    91d4:	e5843000 	str	r3, [r4]
    91d8:	ebfffc42 	bl	82e8 <_sbrk>
    91dc:	e3700001 	cmn	r0, #1
    91e0:	0a000001 	beq	91ec <_sbrk_r+0x2c>
    91e4:	e8bd4038 	pop	{r3, r4, r5, lr}
    91e8:	e12fff1e 	bx	lr
    91ec:	e5943000 	ldr	r3, [r4]
    91f0:	e3530000 	cmp	r3, #0
    91f4:	15853000 	strne	r3, [r5]
    91f8:	eafffff9 	b	91e4 <_sbrk_r+0x24>
    91fc:	00009a88 	.word	0x00009a88
